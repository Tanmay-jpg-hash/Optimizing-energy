{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b49aae5-6104-4e83-8a7e-6c761a3f3d1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "import numpy as np\n",
    "\n",
    "# Load the data\n",
    "df = pd.read_csv(\"Carbon Emission.csv\")\n",
    "\n",
    "# Drop rows with missing target or critical values\n",
    "df = df.dropna(subset=['CarbonEmission'])\n",
    "\n",
    "# Features and target\n",
    "X = df.drop(columns=['CarbonEmission'])\n",
    "y = df['CarbonEmission']\n",
    "\n",
    "# Identify categorical and numeric columns\n",
    "categorical_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
    "numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
    "\n",
    "# Preprocessing for categorical data\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)\n",
    "    ],\n",
    "    remainder='passthrough'  # keep numeric columns as is\n",
    ")\n",
    "\n",
    "# Define model\n",
    "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "\n",
    "# Create pipeline\n",
    "pipeline = Pipeline(steps=[\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', model)\n",
    "])\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "# Predict\n",
    "y_pred = pipeline.predict(X_test)\n",
    "\n",
    "# Evaluation\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"üîç Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "print(f\"üîç Root Mean Squared Error (RMSE): {rmse:.2f}\")\n",
    "print(f\"üìà R¬≤ Score (Accuracy): {r2:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eca0546-8114-41d2-8469-f1e84dba8305",
   "metadata": {},
   "outputs": [],
   "source": [
    "üîç Mean Absolute Error (MAE): 340.21\n",
    "üîç Root Mean Squared Error (RMSE): 490.56\n",
    "üìà R¬≤ Score (Accuracy): 0.83\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ffd18bf-ef5e-4822-ae5e-92164ffd0fbe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
